*******************
Chess.com API Manual
Last Updated: 2012-04-27
*******************

---------------------------------------------------------------------------


API: Register
url: http://www.chess.com/api/register

parameters:
username
password
email
country_id
country_code
app_type - optional (mobile [DEFAULT], android, iphone, pre, windows, blackberry, facebook)

(either country_id or country_code must be specified. country_code is 2 character country abbreviation)

success return string:
Success+<user_token>

error return string:
Error+<error_message>

Example Call:

http://www.chess.com/api/register?username=jay&password=mysecretpassword&email=jay@yahoo.com&country_id=2&app_type=iphone

Example Return String:

Success+adsf876asdf786asdf76f6sd8s8f


---------------------------------------------------------------------------


API: Login (Version2)
url: http://www.chess.com/api/v2/login

parameters:
username  (optional; see note)
password  (required if username provided; see note)
facebook_access_token  (optional; see note)
apn_device_token  (optional - apple device token)
return (optional; comma-separated list of additional data to return)
  -> return values include "username" and "tacticsrating"

success return string:
Success+<premium_status>:<api_version>:<user_token>:<user_session_id>[:{additional data 1}[:{additional data 2} ... [:{additional data n}]]]

error return string:
Error+<error_message>

Note:
One and only one of the following must be submitted (submitting both is an error):
  username AND password; or
  facebook_access_token

Example Calls:

http://www.chess.com/api/login?username=jay&password=mysecretpassword
http://www.chess.com/api/login?facebook_access_token=2227470867|2.uh0c8bJ7B3uHitnQjwlJTg__.3600.1280095200-607270976|9kFH1JFlYZiCBOtFhz16yjjLO7k.
http://www.chess.com/api/login?facebook_access_token=2227470867|2.uh0c8bJ7B3uHitnQjwlJTg__.3600.1280095200-607270976|9kFH1JFlYZiCBOtFhz16yjjLO7k.&return=username
http://www.chess.com/api/login?facebook_access_token=2227470867|2.uh0c8bJ7B3uHitnQjwlJTg__.3600.1280095200-607270976|9kFH1JFlYZiCBOtFhz16yjjLO7k.&return=username,tacticsrating

Example Return String (last example API call):

Success+2:2.0:HGgDAzjq7nWMAJb725QUkT0uzMFXGjrE20tAbj6gb7PuS6FoG30T1rZlJf3q+6CiVNpwBWZMx0jFv97Q+sl94g==:a46a03a50c3e31c1fef83e3848f253c3:jay:959

Premium Status Key:
0 = Basic Member
1 = Gold Member
2 = Platinum Member
3 = Diamond Member

---------------------------------------------------------------------------

API: Get user's move status
url: http://www.chess.com/api/get_move_status

parameters:
id          (user token)

success return string:
Success+<is_users_turn_to_move>:Custom Message:Unix_Timestamp

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/get_move_status?id=asd7fs7sd9f78assd9f

Example Return String:

Success+1:Your Move!:1239663157
Success+0

1 = its users turn to move in a game
0 = user has no moves to make

---------------------------------------------------------------------------

API: Get user's vacation status
url: http://www.chess.com/api/get_vacation_status

parameters:
id          (user token)

success return string:
Success+<is_on_vacation>

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/get_vacation_status?id=asd7fs7sd9f78assd9f

Example Return String:

Success+1
Success+0

1 = on vacation
0 = not on vacation

---------------------------------------------------------------------------

API: Remove user from vacation status
url: http://www.chess.com/api/vacation_leave

parameters:
id          (user token)

success return string:
Success+

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/vacation_leave?id=asd7fs7sd9f78assd9f

Example Return String:

Success+

---------------------------------------------------------------------------

API: Remove user from vacation status
url: http://www.chess.com/api/vacation_return

parameters:
id          (user token)

success return string:
Success+

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/vacation_return?id=asd7fs7sd9f78assd9f

Example Return String:

Success+

---------------------------------------------------------------------------

API: Get Friends (version 2)
url: http://www.chess.com/api/v2/get_friends

parameters:
id          (user token)

success return string:
Success+(|<username>:<isOnline>)0-n

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/v2/get_friends?id=asd7fs7sd9f78assd9f

Example Return String:

Success+|friend1:0|friend2:1|friend3:1

---------------------------------------------------------------------------

API: Create New Game / Challenge
url: http://www.chess.com/api/echess_new_game

parameters:
id            (user token)
opponent      (optional)
    opponent can take various values.
    Option 1: null (random seek)
    Option 2: username
    Option 3: email (invites a user to join the site if that email is not found on chess.com)
    Option 4: facebookId (doesnt send any emails. Format must be facebook_id-FACEBOOKID where FACEBOOKID is their actual id)

For options 3 and 4, when that user registers or activates their account, the games will automatically be created

timepermove   (in days)
iplayas       (0=random , 1=white, 2=black)
minrating     (optional)
maxrating     (optional)
israted     (0 or 1)
game_type     (optional: 1 = chess (default), 2 = chess960)
full_response (optional: any value will provide the alternate success response)

success return string:
Success+
Success+:<game_id>

success return string with 'full_response' requested:
Success+:<game_id>:<game_url>:<game_seek_id>:<game_seek_url>:<is_member_flag>

NOTE 1: either the game_* values will be present, or the game_seek_* values,
but never both.
NOTE 2: the "url" values are suitable for sending to Facebook for the app,
which means that Facebook will prefix them with our app URL:
  http://apps.facebook.com/chessfb/view_game_seek.html?id=123
If you wish to link to the website, you must prefix the website echess URL:
  http://www.chess.com/echess/view_game_seek?id=123

error return string:
Error+<error_message>

Example Call:

http://www.chess.com/api/echess_new_game?id=asd7fs7sd9f78assd9f&timepermove=3&iplayas=0&minrating=1000&maxrating=1500

Example Return String:

Success+


---------------------------------------------------------------------------

API: View Open Challenge/Seeks & Accept/Decline Seek
url: http://www.chess.com/api/echess_open_invites

parameters:
id                (user token)
acceptinviteid    (optional)
declineinviteid   (optional)

success return string:
Success+(:<game_seek_id>:<opponent_username>:<opponent_rating>:<opponent_win_count>:<opponent_loss_count>:<opponent_draw_count>:<playas_color>:<days_per_move>:<game_type>:<initial_setup_fen>)0-n

error return string:
Error+<error_message>

game_type: 1 = standard chess , 2 = chess 960

Example Call 1:

http://www.chess.com/api/echess_open_invites?id=asd7fs7sd9f78assd9f

Example Return String 1:

Success+:57:bigchessdog:1857:0:3:128:ilovechess:1555:10:12:16:1:7:rnbqk2r/pppp1ppp/5n2/4P3/1bB2p2/2N5/PPPP2PP/R1BQK1NR b KQkq - 1 5


Example Call 2:

http://www.chess.com/api/echess_open_invites?id=asd7fs7sd9f78assd9f&acceptinviteid=57

Example Return String 2:

Success+128:ilovechess:1555:10:12:16:1:7:rnbqk2r/pppp1ppp/5n2/4P3/1bB2p2/2N5/PPPP2PP/R1BQK1NR b KQkq - 1 5

---------------------------------------------------------------------------

API: View Open Challenge/Seeks & Accept/Decline Seek (Version2)
url: http://www.chess.com/api/v2/echess_open_invites

parameters:
id                (user token)
acceptinviteid    (optional)
declineinviteid   (optional)

success return string:
Success+(:<game_seek_id>:<opponent_username>:<opponent_rating>:<opponent_win_count>:<opponent_loss_count>:<opponent_draw_count>:<playas_color>:<days_per_move>:<game_type>:<rated>:<initial_setup_fen>)0-n

error return string:
Error+<error_message>

game_type: 1 = standard chess , 2 = chess 960
rated: 1 or 0

Example Call 1:

http://www.chess.com/api/echess_open_invites?id=asd7fs7sd9f78assd9f

Example Return String 1:

Success+:57:bigchessdog:1857:0:3:128:ilovechess:1555:10:12:16:1:7:1:rnbqk2r/pppp1ppp/5n2/4P3/1bB2p2/2N5/PPPP2PP/R1BQK1NR b KQkq - 1 5


Example Call 2:

http://www.chess.com/api/echess_open_invites?id=asd7fs7sd9f78assd9f&acceptinviteid=57

Example Return String 2:

Success+128:ilovechess:1555:10:12:16:1:7:1:rnbqk2r/pppp1ppp/5n2/4P3/1bB2p2/2N5/PPPP2PP/R1BQK1NR b KQkq - 1 5

---------------------------------------------------------------------------

API: View Challenges
url: http://www.chess.com/api/echess_challenges

parameters:
id                (user token)

success return string:
Success+(:<game_seek_id>:<opponent_username>:<opponent_rating>:<opponent_win_count>:<opponent_loss_count>:<opponent_draw_count>:<playas_color>:<days_per_move>:<game_type>:<initial_setup_fen>)0-n

error return string:
Error+<error_message>

game_type: 1 = standard chess , 2 = chess 960

Example Call 1:

http://www.chess.com/api/echess_challenges?id=asd7fs7sd9f78assd9f

Example Return String 1:

Success+|10925357:dshav:1323:16:5:7:0:3:1:0:

---------------------------------------------------------------------------

API: View Challenges (version 2)
url: http://www.chess.com/api/v2/echess_challenges

parameters:
id                (user token)

success return string:
Success+(:<game_seek_id>:<opponent_username>:<opponent_rating>:<opponent_win_count>:<opponent_loss_count>:<opponent_draw_count>:<playas_color>:<days_per_move>:<game_type>:<rated>:<initial_setup_fen>)0-n

error return string:
Error+<error_message>

game_type: 1 = standard chess , 2 = chess 960

Example Call 1:

http://www.chess.com/api/v2/echess_challenges?id=asd7fs7sd9f78assd9f

Example Return String 1:

Success+|10925357:dshav:1323:16:5:7:0:3:1:1:

---------------------------------------------------------------------------

API: Get Current Online Games
url: http://www.chess.com/api/v2/get_echess_current_games

parameters:
id          (user token)
game_type   (optional)
all         (0 = show only games where its users turn to move , 1 = show all users games)


success return string:
Success+<total_games_returned>:(<game_id>:<color>:<game_type>:<username_string_length>:<opponent_username>:<opponent_rating>:<time_remaining_amount>:<time_remaining_units>:<fen_string_length>:<fen>:<timestamp>:<last_move_from_square>:<last_move_to_square>:<is_draw_offer_pending>:<is_opponent_online>:<is_my_turn>:<has_new_message>)0-n

error return string:
Error+<error_message>

game_type: 1 = standard chess , 2 = chess 960
time_remaining_units:  h = hours , d = days
is_draw_offer_pending: p = yes , n = no
is_opponent_online: 1 = yes , 0 = no
is_my_turn: 1 = yes , 0 = no
has_new_message: 1 = yes , 0 = no


Example Call:

http://www.chess.com/api/get_echess_current_games?id=asd7fs7sd9f78assd9f&all=1

Example Return String:

Success+:1:000000001216:w:4:erik:1849:8:h:55:r5k1/1b4pp/pq1p4/1p1P4/1P2R1B1/8/P4rPP/R2Q3K w - - 6 23:1239663157:f5:f2:Rf2:n:1:0:1

---------------------------------------------------------------------------

API: Get Current Online Games (version3)
url: http://www.chess.com/api/v3/get_echess_current_games

parameters:
id          (user token)
game_type   (optional)
all         (0 = show only games where its users turn to move , 1 = show all users games)


success return string:
Success+<total_games_returned>:(<game_id>:<color>:<game_type>:<username_string_length>:<opponent_username>:<opponent_rating>:<time_remaining_amount>:<time_remaining_units>:<fen_string_length>:<fen>:<timestamp>:<last_move_from_square>:<last_move_to_square>:<is_draw_offer_pending>:<is_opponent_online>:<is_my_turn>:<has_new_message>)0-n

error return string:
Error+<error_message>

game_type: 1 = standard chess , 2 = chess 960
time_remaining_units:  h = hours , d = days
is_draw_offer_pending: p = yes , n = no
is_opponent_online: 1 = yes , 0 = no
is_my_turn: 1 = yes , 0 = no
has_new_message: 1 = yes , 0 = no
color: 1 = white , 2 = black

Example Call:

http://www.chess.com/api/get_echess_current_games?id=asd7fs7sd9f78assd9f&all=1

Example Return String:

Success+:1:000000001216:1:4:erik:1849:8:h:55:r5k1/1b4pp/pq1p4/1p1P4/1P2R1B1/8/P4rPP/R2Q3K w - - 6 23:1239663157:f5:f2:Rf2:n:1:0:1

---------------------------------------------------------------------------

API: Get Finished Online Games (up to last 20)
url: http://www.chess.com/api/v2/get_echess_finished_games

parameters:
id          (user token)
game_type   (optional)


success return string:
Success+<total_games_returned>:(<game_id>:<color>:<game_type>:<username_string_length>:<opponent_username>:<opponent_rating>:<time_remaining_amount>:<time_remaining_units>:<fen_string_length>:<fen>:<timestamp>:<last_move_from_square>:<last_move_to_square>:<is_opponent_online>:<game_result>:)0-n

error return string:
Error+<error_message>

game_type: 1 = standard chess , 2 = chess 960
time_remaining_units:  h = hours , d = days
is_opponent_online: 1 = yes , 0 = no
game_result: 1 = win, 0 = loss, 2 = draw

Example Call:

http://www.chess.com/api/get_echess_finished_games?id=asd7fs7sd9f78assd9f

Example Return String:

Success+1:000000002321:b:2:08:newuser4:0000:00:h:61:b1rb1knr/qpppppQp/3N4/p7/8/1P6/P1PPPPPP/B1RBNK1R b KCkc - 1 7:1262642386:b2:g7:0:0:

---------------------------------------------------------------------------

API: Get Finished Online Games (up to last 20) (version3)
url: http://www.chess.com/api/v3/get_echess_finished_games

parameters:
id          (user token)
game_type   (optional)


success return string:
Success+<total_games_returned>:(<game_id>:<color>:<game_type>:<username_string_length>:<opponent_username>:<opponent_rating>:<time_remaining_amount>:<time_remaining_units>:<fen_string_length>:<fen>:<timestamp>:<last_move_from_square>:<last_move_to_square>:<is_opponent_online>:<game_result>:)0-n

error return string:
Error+<error_message>

game_type: 1 = standard chess , 2 = chess 960
time_remaining_units:  h = hours , d = days
is_opponent_online: 1 = yes , 0 = no
game_result: 1 = win, 0 = loss, 2 = draw
color: 1 = white , 2 = black

Example Call:

http://www.chess.com/api/get_echess_finished_games?id=asd7fs7sd9f78assd9f

Example Return String:

Success+1:000000002321:2:2:08:newuser4:0000:00:h:61:b1rb1knr/qpppppQp/3N4/p7/8/1P6/P1PPPPPP/B1RBNK1R b KCkc - 1 7:1262642386:b2:g7:0:0:

---------------------------------------------------------------------------

API: Get EChess Info
url: http://www.chess.com/api/v2/get_echess_info

parameters:
id          (user token)

Retreives a collection of echess info for a user.  This includes current games, finished games and challenges.


Response if an error occurs:
Error+<Error Message Here>

Possible errors:
	Please login again
	Too many login attempts.
	Account not yet active!
	Account has been disabled.

Response if success:
Success+<echess_challenges><echess_current_games><echess_finished_games>

The first response of <> are for echess challenges
The second response of <> are for echess current games
The third response of <> are for echess finished games - Max of 20 Games

'|' is used as the item separater in each response.

Example of a one item response for challenges: Success+<collection of item data><><>
Example of a two item response for challenges: Success+<collection of item data>|<collection of item data><><>

The eches challenges response looks like the following:
<
  <game_seek_id>: The game id
  <game_name>: The seek name - can be null
  <opponent_username>: The opponent username
  <opponent_rating>: The opponent rating
  <opponent_win_count>: The opponent win count
  <opponent_loss_count>: The opponent loss count
  <opponent_draw_count>: The opponent Draw count
  <player_color>:  The users color he/she will play as, 1 = white, 2 = black, 0 = random
  <days_per_move>: The days per move for the seek
  <game_type>: The chess game type.  1 = chess, 2 = chess960
  <is_rated>: Is the seek rated or unrated?, 1 for rated, 2 for not rated
  <initial_setup_fen>: The initial starting position.  This field can be null
>

The echess current games response looks like the following:
<
  <game_id>: The game id
  <player_color>: The users color he/she will play as, w = white, b = black
  <game_type>: The chess game type.  1 = chess, 2 = chess960
  <game_name>: The games name, can be null
  <white_username>: The username for white
  <black_username>: The username for black
  <white_rating>: Whites rating
  <black_rating>: Blacks rating
  <time_stamp>: The timestamp for the game
  <time_remaining_amount>: Remaining time for the game
  <time_remaining_units>: the units, d for day and h for hours
  <initial_fen>: the initial starting position, can be null
  <last_move_from_square>: the last move, from square
  <last_move_to_square>: the last move, to square
  <is_draw_offer_pending>: Draw offer pending.  n = no, p = pending offer
  <is_opponent_online>: Is the opponent online. 1 = yes, 0 = no
  <is_my_turn>: is it the users turn to move. 1 = yes, 0 = no
  <has_new_message>: new messages for the game. 1 = yes, 0 = no
  <move_list>: the moves from the start of the game (all moves after <intial_fen>)
  <days_per_move>: how many days per move.
>

The echess finished games response looks like the following:
<
  <game_id>: The game id
  <player_color>: The users color he/she played as, w = white, b = black
  <game_type>: The chess game type.  1 = chess, 2 = chess960
  <game_name>: The games name, can be null
  <white_username>: The username for white
  <black_username>: The username for black
  <white_rating>: Whites rating
  <black_rating>: Blacks rating
  <time_stamp>: The timestamp for the game
  <initial_fen>: the initial starting position, can be null
  <last_move_from_square>: the last move, from square
  <last_move_to_square>: the last move, to square
  <has_new_message>: new messages for the game. 1 = yes, 0 = no
  <move_list>: the moves from the start of the game (all moves after <intial_fen>)
  <game_result>: The result of the game.  1 = win, 0 = loss, 2 = draw
>

---------------------------------------------------------------------------

API: Get EChess Info (version3)
url: http://www.chess.com/api/v3/get_echess_info

parameters:
id          (user token)

Retreives a collection of echess info for a user.  This includes current games, finished games and challenges.

Response if an error occurs:
Error+<Error Message Here>

Possible errors:
	Please login again
	Too many login attempts.
	Account not yet active!
	Account has been disabled.

Response if success:
Success+<echess_challenges><echess_current_games><echess_finished_games>

The first response of <> are for echess challenges
The second response of <> are for echess current games
The third response of <> are for echess finished games - Max of 20 Games

'|' is used as the item separater in each response.

Example of a one item response for challenges: Success+<collection of item data><><>
Example of a two item response for challenges: Success+<collection of item data>|<collection of item data><><>

The eches challenges response looks like the following:
<
  <game_seek_id>: The game id
  <game_name>: The seek name - can be null
  <opponent_username>: The opponent username
  <opponent_rating>: The opponent rating
  <opponent_win_count>: The opponent win count
  <opponent_loss_count>: The opponent loss count
  <opponent_draw_count>: The opponent Draw count
  <player_color>:  The users color he/she will play as, 1 = white, 2 = black, 0 = random
  <days_per_move>: The days per move for the seek
  <game_type>: The chess game type.  1 = chess, 2 = chess960
  <is_rated>: Is the seek rated or unrated?, 1 for rated, 2 for not rated
  <initial_setup_fen>: The initial starting position.  This field can be null
>

The echess current games response looks like the following:
<
  <game_id>: The game id
  <player_color>: The users color he/she will play as, 1 = white, 2 = black
  <game_type>: The chess game type.  1 = chess, 2 = chess960
  <game_name>: The games name, can be null
  <white_username>: The username for white
  <black_username>: The username for black
  <white_rating>: Whites rating
  <black_rating>: Blacks rating
  <time_stamp>: The timestamp for the game
  <time_remaining_amount>: Remaining time for the game
  <time_remaining_units>: the units, d for day and h for hours
  <initial_fen>: the initial starting position, can be null
  <last_move_from_square>: the last move, from square
  <last_move_to_square>: the last move, to square
  <is_draw_offer_pending>: Draw offer pending.  n = no, p = pending offer
  <is_opponent_online>: Is the opponent online. 1 = yes, 0 = no
  <is_my_turn>: is it the users turn to move. 1 = yes, 0 = no
  <has_new_message>: new messages for the game. 1 = yes, 0 = no
  <move_list>: the moves from the start of the game (all moves after <intial_fen>)
  <days_per_move>: how many days per move.
>

The echess finished games response looks like the following:
<
  <game_id>: The game id
  <player_color>: The users color he/she played as, 1 = white, 2 = black
  <game_type>: The chess game type.  1 = chess, 2 = chess960
  <game_name>: The games name, can be null
  <white_username>: The username for white
  <black_username>: The username for black
  <white_rating>: Whites rating
  <black_rating>: Blacks rating
  <time_stamp>: The timestamp for the game
  <initial_fen>: the initial starting position, can be null
  <last_move_from_square>: the last move, from square
  <last_move_to_square>: the last move, to square
  <has_new_message>: new messages for the game. 1 = yes, 0 = no
  <move_list>: the moves from the start of the game (all moves after <intial_fen>)
  <game_result>: The result of the game.  1 = win, 0 = loss, 2 = draw
>

---------------------------------------------------------------------------

API: Get Game
url: http://www.chess.com/api/get_game

parameters:
id          (game id)


success return string:
Success+:<game_id>:<game_name>:<white_username>:<black_username>:<starting_fen_position>:<move_list>:<user_to_move>:<white_rating>:<black_rating>:<encoded_move_string>:<seconds_remaining>

starting_fen_position   (used for thematic games only)
user_to_move    (1 for white and 0 for black)

error return string:
Error+<error_message>

Example Call:

http://www.chess.com/api/get_game?id=177444

Example Return String:

Success+2266:Localhost San Jose Sharks vs jaytest13's group - Board 1:jaytest13:jay::1. e4 e5 2. d4 exd4 3. Qxd4 Nc6 4. Qc3 Bb4 5. Qxb4 Nxb4 6. Bd3 c5 7. Nf3 Qa5 8. O-O Nxd3 9. Bd2 Qb5 10. Nc3 Qxb2 11. Nd5 Kd8 12. Ng5 Nh6 13. Bc3 Qxc2 14. Bxg7 Rg8 15. Bxh6 Rg6 16. f4 f6 17. f5 Rg8 18. Nxf6 Rxg5 19. Bxg5 Qe2 20. e5 Nb2 21. Rae1 Qc4 22. Ne4+ Kc7 23. Nd6 Qg4 24. f6 b6 25. f7 Ba6 26. Rf2 :2:1035:1438:mC0KlBKBdB5QBs9zszQzftYIgv7GegztclGHbsHjsJ87vM!Vlsjks2?!2V!UnD1TDLU!JT!MVMkmCKtjaemATC7YCRAELTXPT16Ofn:181898

---------------------------------------------------------------------------

API: Get Game (version2)
url: http://www.chess.com/api/v2/get_game

parameters:
id          (user token) - optional
gid          (game id)


success return string:
Success+:<game_id>:<timestamp>:<game_name>:<white_username>:<black_username>:<starting_fen_position>:<move_list>:<user_to_move>:<white_rating>:<black_rating>:<encoded_move_string>:<has_new_message>:<seconds_remaining>

starting_fen_position   (used for thematic games only)
user_to_move    (1 for white and 0 for black)
has_new_message    (1 if id is passed and there is a new message)

error return string:
Error+<error_message>

Example Call:

http://www.chess.com/api/v2/get_game?id=asdjasdjfj2324jajj3&gid=177444

Example Return String:

Success+2266:1239663157:Localhost San Jose Sharks vs jaytest13's group - Board 1:jaytest13:jay::1. e4 e5 2. d4 exd4 3. Qxd4 Nc6 4. Qc3 Bb4 5. Qxb4 Nxb4 6. Bd3 c5 7. Nf3 Qa5 8. O-O Nxd3 9. Bd2 Qb5 10. Nc3 Qxb2 11. Nd5 Kd8 12. Ng5 Nh6 13. Bc3 Qxc2 14. Bxg7 Rg8 15. Bxh6 Rg6 16. f4 f6 17. f5 Rg8 18. Nxf6 Rxg5 19. Bxg5 Qe2 20. e5 Nb2 21. Rae1 Qc4 22. Ne4+ Kc7 23. Nd6 Qg4 24. f6 b6 25. f7 Ba6 26. Rf2 :2:1035:1438:mC0KlBKBdB5QBs9zszQzftYIgv7GegztclGHbsHjsJ87vM!Vlsjks2?!2V!UnD1TDLU!JT!MVMkmCKtjaemATC7YCRAELTXPT16Ofn:181898

---------------------------------------------------------------------------

API: Get Game (version3)
url: http://www.chess.com/api/v3/get_game

parameters:
id          (user token) - optional
gid          (game id)


success return string:
Success+:<game_id>:<game_type>:<timestamp>:<game_name>:<white_username>:<black_username>:<starting_fen_position>:<move_list>:<user_to_move>:<white_rating>:<black_rating>:<encoded_move_string>:<has_new_message>:<seconds_remaining>

starting_fen_position   (used for thematic games only)
user_to_move    (1 for white and 0 for black)
has_new_message    (1 if id is passed and there is a new message)
game_type: 1 = standard chess , 2 = chess 960

error return string:
Error+<error_message>

Example Call:

http://www.chess.com/api/v2/get_game?id=asdjasdjfj2324jajj3&gid=177444

Example Return String:

Success+2266:1:1239663157:Localhost San Jose Sharks vs jaytest13's group - Board 1:jaytest13:jay::1. e4 e5 2. d4 exd4 3. Qxd4 Nc6 4. Qc3 Bb4 5. Qxb4 Nxb4 6. Bd3 c5 7. Nf3 Qa5 8. O-O Nxd3 9. Bd2 Qb5 10. Nc3 Qxb2 11. Nd5 Kd8 12. Ng5 Nh6 13. Bc3 Qxc2 14. Bxg7 Rg8 15. Bxh6 Rg6 16. f4 f6 17. f5 Rg8 18. Nxf6 Rxg5 19. Bxg5 Qe2 20. e5 Nb2 21. Rae1 Qc4 22. Ne4+ Kc7 23. Nd6 Qg4 24. f6 b6 25. f7 Ba6 26. Rf2 :2:1035:1438:mC0KlBKBdB5QBs9zszQzftYIgv7GegztclGHbsHjsJ87vM!Vlsjks2?!2V!UnD1TDLU!JT!MVMkmCKtjaemATC7YCRAELTXPT16Ofn:181898

---------------------------------------------------------------------------

API: Get Game (version4)
url: http://www.chess.com/api/v4/get_game

parameters:
id          (user token) - optional
gid          (game id)


success return string:
Success+:<game_id>:<game_type>:<timestamp>:<game_name>:<white_username>:<black_username>:<starting_fen_position>:<move_list>:<user_to_move>:<white_rating>:<black_rating>:<encoded_move_string>:<has_new_message>:<seconds_remaining>:<game_result>:<draw_offered>

starting_fen_position   (used for thematic games only)
user_to_move    (1 for white and 0 for black)
has_new_message    (1 if id is passed and there is a new message)
game_type: 1 = standard chess , 2 = chess 960
game_result: result of the game for a given user
draw_offered: 0 = no draw offered, 1 = white offered draw, 2 = black offered draw

error return string:
Error+<error_message>

Example Call:
http://lh.chess.com/api/v4/get_game?gid=35000407&id=JXeOmxOZy1wYWLYOWPdFC%2BGFMDy6ZJJmEEJM2FVoBfJXB2tFDcV4%2Frc1kd6ZiC4LQMGUPoP%2BmIvErVkijBpYvJszzpvIYpueuRHpsmceJ2o%3D

Example Return String:
Success+35000407:1:1315138500:Let's Play!:amal:jay::1. e4 e5 :1:1200:1206:mC0K::-5216742:1:0

---------------------------------------------------------------------------

API: Get Game (version5)
url: http://www.chess.com/api/v5/get_game

parameters:
id          (user token) - optional
gid          (game id)


success return string:
Success+:<game_id>:<game_type>:<timestamp>:<game_name>:<white_username>:<black_username>:<starting_fen_position>:<move_list>:<user_to_move>:<white_rating>:<black_rating>:<encoded_move_string>:<has_new_message>:<seconds_remaining>:<game_result>:<draw_offered>:<rated>:<days_per_move>

starting_fen_position   (used for thematic games only)
user_to_move    (1 for white and 0 for black)
has_new_message    (1 if id is passed and there is a new message)
game_type: 1 = standard chess , 2 = chess 960
game_result: result of the game for a given user
draw_offered: 0 = no draw offered, 1 = white offered draw, 2 = black offered draw

error return string:
Error+<error_message>

Example Call:
http://lh.chess.com/api/v4/get_game?gid=35000407&id=JXeOmxOZy1wYWLYOWPdFC%2BGFMDy6ZJJmEEJM2FVoBfJXB2tFDcV4%2Frc1kd6ZiC4LQMGUPoP%2BmIvErVkijBpYvJszzpvIYpueuRHpsmceJ2o%3D

Example Return String:
Success+35000407:1:1315138500:Let's Play!:amal:jay::1. e4 e5 :1:1200:1206:mC0K::-5216742:1:0:1:3

---------------------------------------------------------------------------

API: Online Chess Actions
url: http://www.chess.com/api/submit_echess_action

parameters:
id          (user token)
chessid     (game id)
command     (SUBMIT , RESIGN , OFFERDRAW , ACCEPTDRAW , DECLINEDRAW , CHAT)
newmove     (only used for SUBMIT - format = b7b8=Q or e2e4)
newmoveencoded     (only used for SUBMIT - strange encoded move format)
timestamp   (timestamp of the game)
message     (only used for CHAT)

error return string:
Error+<error_message>

Example SUBMIT Call:

http://www.chess.com/api/submit_echess_action?id=asd7fs7sd9f78assd9f&chessid=57&command=SUBMIT&newmove=b7c8%3DQ&timestamp=1239663157

Example SUBMIT Return String:

Success


Example RESIGN Call:

http://www.chess.com/api/submit_echess_action?id=asd7fs7sd9f78assd9f&chessid=57&command=RESIGN&timestamp=1239663157

Example RESIGN Return String:

Success


Example OFFERDRAW Call:

http://www.chess.com/api/submit_echess_action?id=asd7fs7sd9f78assd9f&chessid=57&command=OFFERDRAW&timestamp=1239663157

Example OFFERDRAW Return String:

Success

Example CHAT Call 1:

http://www.chess.com/api/submit_echess_action?id=asd7fs7sd9f78assd9f&chessid=57&command=CHAT&message=some_url_encoded_message&timestamp=1239663157

Example CHAT Return String 1:

Success+:0:this+is+a+url+encoded+message:1:this+is+a+url+encoded+message:0:some_url_encoded_message


Example CHAT Call 2:

http://www.chess.com/api/submit_echess_action?id=asd7fs7sd9f78assd9f&chessid=57&command=CHAT&timestamp=1239663157

Example CHAT Return String 2:

Success+:0:this is a message from me to the other user:1:this is a message to me from other user:0:some_url_encoded_message


---------------------------------------------------------------------------

API: Get Tactics Problem Batch
url: http://www.chess.com/api/get_tactics_problem_batch

parameters:
id          (user token)
is_install (0 or 1 - if 1 then api will return default set of 100 problems)

success return string:
Success+(|<id>:<fen>:<move_list>:<attempt_count>:<passed_count>:<rating>:<average_seconds>)0-n

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/get_tactics_problem_batch?id=asd7fs7sd9f78assd9f

Example Return String:

Success+|877:2kr1r2/ppp3pp/3q4/3p1p2/3P2P1/2PQ2n1/PP1N1bPP/RNB2R1K w - - 1 2:1. hxg3 Qh6# :7:4:1073:14|820:r1q2r1k/p4b2/1p3P2/3p3Q/1P1B1P2/2PB4/P6P/6RK b - - 1 1:1... Bxh5 2. f7# :4:3:720:14|865:6k1/1p2qpb1/p2R2p1/4P3/1P3P1p/2r4P/3Q2PK/8 w - - 1 2:1. Qxc3 Qxd6 2. exd6 Bxc3 3. d7 Bf6 :3:2:708:11|746:r3k2r/ppp1b2p/2n1pNp1/1Q1q4/2pp4/8/PPP2PPP/R1B1R1K1 b kq - 1 1:1... Bxf6 2. Qxd5 :2:1:1045:7|779:1r2N2k/pbp4p/1p1qp1p1/4Q3/3P4/2P5/PP4PP/5RK1 b KQkq - 1 1:1... Qxe5 2. Rf8# :3:2:773:3|835:7k/5r2/1p3q2/p1p4Q/2P3R1/4P2P/7K/8 b - - 1 1:1... Rh7 2. Qe8+ Qf8 3. Qxf8# :3:1:931:10|961:r4rk1/ppp1np1Q/3qbBp1/3pR3/8/3B4/PPP2PPP/6K1 b - - 1 1:1... Kxh7 2. Rh5+ Kg8 3. Rh8# :3:2:784:5

Example Error Return String:
Error+Tactics daily limit reached.

---------------------------------------------------------------------------

API: Tactics Trainer
url: http://www.chess.com/api/tactics_trainer

parameters:
id          (user token)
encoded_moves  (optional, 1 or 0)
tactics_id  (optional)
passed      (1 or 0 if tactics_id is present)
correct_moves      (required if tactics_id is present and passed is 0)
seconds      (required if tactics_id is present)

This api will always return one tactics problem. If a tactics id and information is also passed, it will also process that tactic as completed.


success return string:
Success+|<score>:<user_rating_change>:<user_rating>:<problem_rating_change>:<problem_rating>(|<id>:<fen>:<move_list>:<attempt_count>:<passed_count>:<rating>:<average_seconds>)0-n

success return string if no tactics_id or duplicate tactics_id:
Success+|(|<id>:<fen>:<move_list>:<attempt_count>:<passed_count>:<rating>:<average_seconds>)0-n


score = percent (0 - 100)

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/tactics_trainer?id=6asdf6sad6fasd6fasd6fsd6&tactics_id=20776&passed=0&seconds=29&correct_moves=1

Example Return String:

Success+|6.6:-65:1273:78:1385|835:7k/5r2/1p3q2/p1p4Q/2P3R1/4P2P/7K/8 b - - 1 1:1... Rh7 2. Qe8+ Qf8 3. Qxf8#:3:1:931:10

Example Return String if no tactics_id or duplicate tactics_id:

Success+||835:7k/5r2/1p3q2/p1p4Q/2P3R1/4P2P/7K/8 b - - 1 1:1... Rh7 2. Qe8+ Qf8 3. Qxf8#:3:1:931:10


---------------------------------------------------------------------------

API: Allow auto login to chess.com:
url: http://www.chess.com/login?als=<auto_login_string>&goto=<goto_url>

parameters
id          (user token)
goto_url    (redirect url after login)

Example: http://www.chess.com/login?als=kFCMJsY4%2BiWfnCKH7%2F%2FG45myelPMhTDTN0UTho3j99KlppWfbj6Dz7oBtjLRM5elPYxo1Q0m2qWvY3EeQ44x6A%3D%3D&goto=%2Fhome%2Finvite_friends.html


---------------------------------------------------------------------------

API: Get Videos
url: http://www.chess.com/api/v2/get_videos

parameters:
id          (user token - optional)
iphone      (optional - 1 or 0, defaults to 0)
keyword     (optional)
category    (optional)
skill_level (optional)
opening     (optional)
author      (optional)
theme       (optional)
page        (optional - defaults to 1)
page-size        (optional - defaults to 20)

category values: amazing-games,endgames,openings,rules-basics,strategy,tactics
skill_level values: beginner, intermediate, advanced


This api will return videos in order of descending publish date, paginated 20 per request.

success return string:
Success+|<total_video_count_matching_filters>|(<title><-><description><-><category><-><skill_level><-><opening><-><author_username><-><author_chess_title><-><author_first_name><-><author_last_name><-><minutes><-><publish_timestamp><-><view_url><-><fen><--->)0-n

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/get_videos?id=lOXwm4qMHloisAZ7M9NqmJP3oqRUCL1%2Fn5845Vja%2Bn%2BozhMl62S6RiZo8ghU63WESN9Fb6ivL6VCW9krRnVNkg%3D%3D&skill_level=beginner&category=strategy&page=1


Example Return String:

Success+|1|Test11<->test<->Strategy<->Intermediate<->Strategy<->jay<->CM Severson<->25<->http://lh.chess.com/video/player_iphone/test1/lOXwm4qMHloisAZ7M9NqmJP3oqRUCL1%2Fn5845Vja%2Bn%2BozhMl62S6RiZo8ghU63WESN9Fb6ivL6VCW9krRnVNkg%3D%3D/playme.m4v<--->


---------------------------------------------------------------------------

API: Get User Info
url: http://www.chess.com/api/get_user_info

parameters:
username


success return string:
Success+|<user_id>|<chess_title>|<username>|<online_status_image_url>|<country>|<country_image_url>|<last_login_date>|<best_rating>|<best_rating_type>|<games_in_progress_count>|<timeout_percent>|<is_friends>|<has_avatar>|<avatar_url>

error return string:
Error+<error_message>


Example Call:

http://www.chess.com/api/get_user_info?username=jay

Example Return String:

Success+|31||jay|online|United States|http://images.chesscomfiles.com/images/flags/us.gif|5/13/2010 2:24pm|1904|Turn-Based|3|0.39%|0|1|http://files.chesscomfiles.com/images_users/avatars/jay.gif



----------------------------------------------------------------------------

API: Get User Info (Version 2)
url: http://www.chess.com/api/v2/get_user_info

parameters:
username


success return string:
Success+|<user_id>|<chess_title>|<username>|<online_status_image_url>|<country>|<country_image_url>|<last_login_date>|<best_rating>|<best_rating_type>|<games_in_progress_count>|<timeout_percent>|<is_friends>|<has_avatar>|<avatar_url>|<is_unrated>

error return string:
Error+<error_message>

<is_unrated> means that no rated game (echess, chess960, blitz,lightning, standard) was finished by the user.

Example Call:

http://www.chess.com/api/v2/get_user_info?username=jay

Example Return String:

Success+|31||jay|online|United States|http://images.chesscomfiles.com/images/flags/us.gif|5/13/2010 2:24pm|1904|Turn-Based|3|0.39%|0|1|http://files.chesscomfiles.com/images_users/avatars/jay.gif|0

----------------------------------------------------------------------------

API: Get User Info (Version 3)
url: http://www.chess.com/api/v3/get_user_info

parameters:
username


success return string:
Success+|<user_id>|<chess_title>|<username>|<online_status_image_url>|<country>|<country_code>|<last_login_date>|<best_rating>|<best_rating_type>|<games_in_progress_count>|<timeout_percent>|<is_friends>|<has_avatar>|<avatar_url>|<is_unrated>|<user_points>|<trophy_images>|<user_status>|<membership_class>|<is_tracked_user>

error return string:
Error+<error_message>

<is_unrated> means that no rated game (echess, chess960, blitz,lightning, standard) was finished by the user.

Example Call:

http://www.chess.com/api/v3/get_user_info?username=jay

Example Return String:

Success+|31||jay|online|United States|us|5/13/2010 2:24pm|1904|Turn-Based|3|0.39%|0|1|http://files.chesscomfiles.com/images_users/avatars/jay.gif|0|200|<img src="http://lhfiles.chess.com/images_trophies/17-896.gif" alt="1st Place from CHESScom" />|I love chess.com|<a href="http://www.chess.com/about.html" title="Chess.com Staff" class="member staff"></a>|1

----------------------------------------------------------------------------

Piotr Move List Encoding:

Square Mappings
    'a' => 'a1'
    'b' => 'b1'
    'c' => 'c1'
    'd' => 'd1'
    'e' => 'e1'
    'f' => 'f1'
    'g' => 'g1'
    'h' => 'h1'
    'i' => 'a2'
    'j' => 'b2'
    'k' => 'c2'
    'l' => 'd2'
    'm' => 'e2'
    'n' => 'f2'
    'o' => 'g2'
    'p' => 'h2'
    'q' => 'a3'
    'r' => 'b3'
    's' => 'c3'
    't' => 'd3'
    'u' => 'e3'
    'v' => 'f3'
    'w' => 'g3'
    'x' => 'h3'
    'y' => 'a4'
    'z' => 'b4'
    'A' => 'c4'
    'B' => 'd4'
    'C' => 'e4'
    'D' => 'f4'
    'E' => 'g4'
    'F' => 'h4'
    'G' => 'a5'
    'H' => 'b5'
    'I' => 'c5'
    'J' => 'd5'
    'K' => 'e5'
    'L' => 'f5'
    'M' => 'g5'
    'N' => 'h5'
    'O' => 'a6'
    'P' => 'b6'
    'Q' => 'c6'
    'R' => 'd6'
    'S' => 'e6'
    'T' => 'f6'
    'U' => 'g6'
    'V' => 'h6'
    'W' => 'a7'
    'X' => 'b7'
    'Y' => 'c7'
    'Z' => 'd7'
    '0' => 'e7'
    '1' => 'f7'
    '2' => 'g7'
    '3' => 'h7'
    '4' => 'a8'
    '5' => 'b8'
    '6' => 'c8'
    '7' => 'd8'
    '8' => 'e8'
    '9' => 'f8'
    '!' => 'g8'
    '?' => 'h8'

Promotion Mappings:

Promote Left:  ( [ @ {
Promote Right: ) ] $ }
Promote Straight: ^ _ # ~
Promotion Piece:

    '(' => 'N'
    '^' => 'N'
    ')' => 'N'
    '[' => 'R'
    '_' => 'R'
    ']' => 'R'
    '@' => 'B'
    '#' => 'B'
    '$' => 'B'
    '{' => 'Q'
    '~' => 'Q'
    '}' => 'Q'
---------------------------------------------------------------------------
API: get_friend_requests
Returns the incoming friend request for the user

url: http://www.chess.com/api/get_friend_requests

parameters:
id          (user token)

success return string:
Success+<total_friend_requests>|<friend_request_id>:<username>:<message>|<...>|<...>

error return string:
Error+<error_message>

Example Call:

http://www.chess.com/api/get_friend_requests?id=F4v6X5dC1HJXBVb0DQuI72F2w4O/yvWWUTLanwGYjtngw7NpwJsH5qHoixweSMgBurbl29sl28ItycrKHsLFXA==

Example Return String:
Success+0
Example Return String:
Success+3|1232:Jon:Be My Friend!|2343:Jay:Accept my friend request.|345341:Faisal:Friends?

---------------------------------------------------------------------------
API: friend_request
Accept / Decline friend requests
url: http://www.chess.com/api/friend_request

parameters:
id          (user token)
rid         (request_id)
action      (1 = accept friend request, 2 = decline friend request)

success return string:
Success+Friend request from <username> (accepted|declined)

error return string:
Error+<error_message>

Example Call:
http://www.chess.com/api/friend_request?id=F4v6X5dC1HJXBVb0DQuI72F2w4O/yvWWUTLanwGYjtngw7NpwJsH5qHoixweSMgBurbl29sl28ItycrKHsLFXA==&rid=1291&action=0

Example Return String:
Success+Friend request from Spock declined
---------------------------------------------------------------------------
API: add_friend
url: http://www.chess.com/api/add_friend

parameters:
id          (user token)
username    (of the user to be added)


success return string:
Success+<friend_request_id>

error return string:
Error+<error_message>

Example Call:
http://www.chess.com/api/add_friend?id=F4v6X5dC1HJXBVb0DQuI72F2w4O/yvWWUTLanwGYjtngw7NpwJsH5qHoixweSMgBurbl29sl28ItycrKHsLFXA==&username=amal

Example Return String:
Success+23342
---------------------------------------------------------------------------
API: submit_cheater_suspect
url: http://www.chess.com/api/submit_cheater_suspect

parameters:
uid          (user id)
location    (use "live" for live chess and "echess" for echess games)
amount      (the amount of previous games, default of 20, max of 50)


success return string:
Success+Completed

error return string:
Error+<error_message>

Example Call:
http://www.chess.com/api/submit_cheater_suspect?uid=31&location=live&amount=20

Example Return String:
Success+Completed
---------------------------------------------------------------------------
API: Explorer
url: http://www.chess.com/api/explorer

parameters:
id           (user token)
username          (username)
type    (Type of games - master or user)
game_type (for type user, this can be 'live' or 'echess' or null for both)
color (for type user, white or black)
fen (fen string)
ply (current ply)

success return string:
Success+<number_of_moves>|<move>:<num_games>:<white_won_percent>:<black_won_percent>:<draw_percent>|<...>|<...>

error return string:
Error+<error_message>

Example Call:
http://www.chess.com/api/explorer?ply=4&fen=rnbqkb1r%2Fpppp1ppp%2F4pn2%2F8%2F3P4%2F5N2%2FPPP1PPPP%2FRNBQKB1R%20w%20KQkq

Example Return String:
Success+7|3.c4:722:42:31:27|3.Bg5:67:19:63:18|3.g3:49:43:35:22|3.e3:32:41:47:13|3.Bf4:24:13:63:25|3.c3:5:40:40:20|3.Nbd2:4:25:50:25|
---------------------------------------------------------------------------
API: validate_auth_token
url: http://www.chess.com/api/validate_auth_token

parameters:
auth_token          (user token)

success return string:
Success+

error return string:
Error+<error_message>

Example Call:
http://www.chess.com/api/validate_auth_token?auth_token=jajeue25j25j25j2j11jqja

Example Return String:
Success+
---------------------------------------------------------------------------
